{"version":3,"sources":["serviceWorker.js","Components/card.js","Components/cardlist.js","Components/scroll.js","Components/searchbox.js","Components/ErrorBoundry.js","Containers/app.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","Scroll","props","style","overflowY","border","height","children","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundry","state","hasError","error","info","this","Component","App","onSearchChange","event","setState","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCJSC,EAZH,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,MAAMC,EAAO,EAAPA,GACvB,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACC,4BAAKF,GACL,2BAAIC,MCcMK,EAlBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAClB,OACE,6BAEEA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OAAQ,kBAAC,EAAD,CAAOC,IAAKD,EACRR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCFpBW,EARA,SAACC,GACf,OACC,yBAAKC,MAAO,CAACC,UAAW,SAAWC,OAAQ,kBAAmBC,OAAO,UACnEJ,EAAMK,WCUKC,EAbG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aACnB,OACC,yBAAKjB,UAAU,OACd,2BACCA,UAAU,mCACVkB,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCaCI,G,wDAnBd,WAAYX,GAAO,IAAD,8BACjB,cAAMA,IACDY,MAAQ,CACZC,UAAW,GAHK,E,8DAOAC,EAAMC,GACvBC,KAAKJ,MAAM,CAACC,UAAS,M,+BAIrB,OAAGG,KAAKJ,MAAMC,SACN,gEAEDG,KAAKhB,MAAMK,a,GAhBOY,cCiDZC,E,kDA3Cd,aAAc,IAAD,8BACZ,gBAaDC,eAAe,SAACC,GACf,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAbzC,EAAKZ,MAAM,CACVlB,OAAS,GACT4B,YAAa,KAJF,E,gEAQO,IAAD,OAClBG,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAE,EAAKR,SAAS,CAAC3B,OAAOmC,S,+BAO5B,IAAD,EACoBb,KAAKJ,MAAzBlB,EADA,EACAA,OAAO4B,EADP,EACOA,YACRQ,EAAiBpC,EAAOqC,QAAO,SAAAC,GACpC,OAAOA,EAAM7C,KAAK8C,cAAcC,SAASZ,EAAYW,kBAGvD,OAASvC,EAAOyC,OAGd,yBAAK7C,UAAU,MACd,wBAAIA,UAAU,YAAd,eACA,kBAAC,EAAD,CAAWiB,aAAcS,KAAKG,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUzB,OAAQoC,OAPrB,wBAAIxC,UAAU,SAAd,e,GA1BgB2B,aCClBmB,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SP2H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLgC,QAAQhC,MAAMA,EAAMiC,a","file":"static/js/main.ae113158.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card= ({name,email,id}) =>{\r\n\t\treturn(\r\n\t\t\t<div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc\">\r\n\t\t\t\t<img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h1>{name}</h1>\r\n\t\t\t\t\t<p>{email}</p>\r\n\t\t\t\t</div>\t\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './card.js';\r\n\r\n\r\nconst CardList = ({robots}) =>{ \r\n\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{\r\n\t\t\t\t\trobots.map((user,i) =>{\r\n\t\t\t\t\t\treturn (<Card  key={i} \r\n\t\t\t\t\t             id={robots[i].id} \r\n\t\t\t\t\t             name={robots[i].name} \r\n\t\t\t\t\t             email={robots[i].email}\r\n\t\t\t\t\t             />\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t}\t\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll' , border: '1px solid black', height:'700px'\t}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) =>{\r\n\treturn(\r\n\t\t<div className=\"pa2\">\r\n\t\t\t<input \r\n\t\t\t\tclassName='pa3 b3 b--green bg-lightest-blue'\r\n\t\t\t\ttype=\"search\" \r\n\t\t\t\tplaceholder=\"Search Robots\" \r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError : false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error,info){\r\n\t\tthis.state({hasError:true})\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn <h1>Oooops . A Small problem occured</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry;","import React, {Component} from 'react';\r\nimport CardList from '../Components/cardlist';\r\nimport Scroll from '../Components/scroll';\r\nimport SearchBox from '../Components/searchbox';\r\nimport './app.css';\r\nimport ErrorBoundry from '../Components/ErrorBoundry';\r\n\r\nclass App extends Component  {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t\t\trobots : [],\r\n\t\t\tsearchfield: ' '\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(response=> response.json())\r\n\t\t\t.then(users=>this.setState({robots:users}));\r\n\t\t}\r\n\t\r\n\tonSearchChange=(event)=>{\r\n\t\tthis.setState({searchfield: event.target.value})\r\n\t}\t\r\n\t\r\n\trender(){\r\n\t\tconst {robots,searchfield}=this.state;\r\n\t\tconst filteredRobots = robots.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t})\r\n\r\n\treturn (!robots.length)?\r\n\t\t<h1 className=\"title\">Loading</h1>:\r\n\t\t(\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1 className=\"f1 title\">Robofriends</h1>\r\n\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t<CardList robots={filteredRobots} />\r\n\t\t\t\t\t</ErrorBoundry>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t\r\n\t\r\n\t}\r\n\t\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n//import {robots} from \"./robots.js\";\nimport App from './Containers/app.js';\n\nReactDOM.render(<App />,document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}